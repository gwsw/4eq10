#!/usr/bin/env perl
use strict;

# Solve puzzles in the 4=10 game.
# Given 4 numbers, add operators and parentheses to make them sum to 10.

my $usage = <<_EOF_;
usage: 4eq10 [-n OPS] [-m #][-s][-S] [-t] N1 N2 N3 N4";
             -n Operator(s) prohibited for this game: [-+*/p]*
             -m Print no more than # solutions
             -s Same as -m0
             -S Same as -m1
             -t Don't print total
_EOF_

use Getopt::Std;

# -------------------------------------------------------------
# Constants

my @ops     = ( '*', '/', '+', '-' );
my @op_prec = (  1,   1,   0,   0  );
my @op_impl = ( \&op_mul, \&op_div, \&op_add, \&op_sub );
my $num_ops = @ops;
my $op_bits = 2; # ceil(ln2($num_ops))

#my $num_prec = 2; # two precedence levels, AS and MD
my $prec_bits = 1; # ceil(ln2($num_prec))

# -------------------------------------------------------------
main();
sub main {
    my %opt;
    die $usage if not getopts('m:n:sSt', \%opt);
    my @vars = @ARGV;
    die $usage if not @vars or @vars < 2;

    my $s = new_solver(@vars);
    my %seen;
    my $solns = 0;
    my $max_print = ($opt{m} ? $opt{m} : $opt{S} ? 1 : $opt{s} ? 0 : 99999999);
    while (solve_next($s, $opt{n})) {
        if (solved($s)) {
            my $prt = solve_tostring($s);
            if (not $seen{$prt}) {
                $seen{$prt} = 1;
                print $prt, "\n" if $solns++ < $max_print;
            }
        }
    }
    print "$solns solutions\n" unless $opt{t};
}

# -------------------------------------------------------------
# Solver represents an expression as 3 ops interspersed between 4 vars.
# The ops are stored in an oplist, an integer divided into 2-bit fields.
# There can also be one pair of parentheses distributed among the vars.
sub new_solver {
    # Nodes are the on-screen slots that can be manipulated by the player.
    my $num_op_nodes = scalar(@_) - 1;
    my %solver = (
        'vars'           => \@_,
        'goal'           => 10,
        'order'          => -1, # so solve_next will return order=>0
        'oplist'         => 0,
        'parenset'       => 0,
        'num_oplists'    => $num_ops ** $num_op_nodes,
        'num_prec_cfg'   => (1 << $num_op_nodes) * $prec_bits,
        'num_var_orders' => factorial(scalar @_),
        'num_parensets'  => (@_)*(@_-1)/2,
    );
    return \%solver;
}

# -------------------------------------------------------------
# Increment to the next possible solution.
sub solve_next {
    my ($s, $no_ops) = @_;
    if (++$s->{order} >= $s->{num_var_orders}) {
        $s->{order} = 0;
        my $np = ($no_ops =~ /p/) ? 1 : $s->{num_parensets};
        if (++$s->{parenset} >= $np) {
            $s->{parenset} = 0;
            for (;;) {
                return 0 if ++$s->{oplist} >= $s->{num_oplists}; # no more solutions
                last unless oplist_has_any($s, $no_ops);
            }
        }
    }
    return 1;
}

# -------------------------------------------------------------
# Evaluate the expression represented by a solver.
sub solve_eval {
    my ($s) = @_;
    # THIS DOES NOT SCALE VERY WELL!
    my @solve_algos = (
        # A-B-C-D    A-B-C*D    A-B*C-D    A-B*C*D    A*B-C-D    A*B-C*D    A*B*C-D    A*B*C*D
        'AB0C1D2', 'AB0CD21', 'ABC10D2', 'ABC1D20', 'AB0C1D2', 'AB0CD21', 'AB0C1D2', 'AB0C1D2',

        # (A-B)-C-D  (A-B)-C*D  (A-B)*C-D  (A-B)*C*D  (A*B)-C-D  (A*B)-C*D  (A*B)*C-D  (A*B)*C*D
        'AB0C1D2', 'AB0CD21', 'AB0C1D2', 'AB0C1D2', 'AB0C1D2', 'AB0CD21', 'AB0C1D2', 'AB0C1D2',

        # (A-B-C)-D  (A-B-C)*D  (A-B*C)-D  (A-B*C)*D  (A*B-C)-D  (A*B-C)*D  (A*B*C)-D  (A*B*C)*D
        'AB0C1D2', 'AB0C1D2', 'ABC10D2', 'ABC10D2', 'AB0C1D2', 'AB0C1D2', 'AB0C1D2', 'AB0C1D2',

        # A-(B-C)-D  A-(B-C)*D  A-(B*C)-D  A-(B*C)*D  A*(B-C)-D  A*(B-C)*D  A*(B*C)-D  A*(B*C)*D
        'ABC10D2', 'ABC1D20', 'ABC10D2', 'ABC1D20', 'ABC10D2', 'ABC10D2', 'ABC10D2', 'ABC10D2',

        # A-(B-C-D)  A-(B-C*D)  A-(B*C-D)  A-(B*C*D)  A*(B-C-D)  A*(B-C*D)  A*(B*C-D)  A*(B*C*D)
        'ABC1D20', 'ABCD210', 'ABC1D20', 'ABC1D20', 'ABC1D20', 'ABCD210', 'ABC1D20', 'ABC1D20',

        # A-B-(C-D)  A-B-(C*D)  A-B*(C-D)  A-B*(C*D)  A*B-(C-D)  A*B-(C*D)  A*B*(C-D)  A*B*(C*D)
        'AB0CD21', 'AB0CD21', 'ABCD210', 'ABCD210', 'AB0CD21', 'AB0CD21', 'AB0CD21', 'AB0CD21',
    );

    my @xstack;
    my $ax = ($s->{parenset} * $s->{num_prec_cfg}) + oplist_prec_cfg($s);
    foreach my $ch (split //, $solve_algos[$ax]) {
        if ($ch =~ /[A-D]/) { # $num_var_nodes
            my $opx = ord($ch) - ord('A');
            push @xstack, solve_var($s, $opx);
        } elsif ($ch =~ /[0-2]/) { # $num_op_nodes
            my $opx = ord($ch) - ord('0');
            my $v2 = pop @xstack;
            my $v1 = pop @xstack;
            my $op = solve_op($s, $opx);
            push @xstack, &{$op_impl[$op]}($v1, $v2);
        }
    }
    return pop @xstack;
}

# -------------------------------------------------------------
# Is solver at the goal?
sub solved {
    my ($s) = @_;
    return solve_eval($s) == $s->{goal};
}

sub solve_var {
    my ($s, $opx) = @_;
    my @orders = (
        [0,1,2,3], [0,1,3,2], [0,2,1,3], [0,2,3,1], [0,3,1,2], [0,3,2,1], 
        [1,0,2,3], [1,0,3,2], [1,2,0,3], [1,2,3,0], [1,3,0,2], [1,3,2,0], 
        [2,0,1,3], [2,0,3,1], [2,1,0,3], [2,1,3,0], [2,3,0,1], [2,3,1,0],
        [3,0,1,2], [3,0,2,1], [3,1,0,2], [3,1,2,0], [3,2,0,1], [3,2,1,0],
    );
    my $order = $orders[$s->{order}];
    return ${$s->{vars}}[$$order[$opx]];
}

sub solve_op {
    my ($s, $opx) = @_;
    return oplist_op($s->{oplist}, $opx);
}

# -------------------------------------------------------------
sub solve_tostring {
    my ($s, $add_eq) = @_;
    my $r = '';
    my $p = $s->{parenset};
    for (my $i = 0; $i < 4; ++$i) {
        $r .= "( " if 
            ($i == 0 and ($p == 1 or $p == 2)) or
            ($i == 1 and ($p == 3 or $p == 4)) or
            ($i == 2 and $p == 5);
        $r .= solve_var($s,$i);
        $r .= " )" if
            ($i == 1 and $p == 1) or
            ($i == 2 and ($p == 2 or $p == 3)) or
            ($i == 3 and ($p == 4 or $p == 5));
        $r .= " " . $ops[solve_op($s,$i)] . " " if $i < 3;
    }
    $r .= " = " . solve_eval($s) if $add_eq;
    return $r;
}

# -------------------------------------------------------------
# Perform an arithmetic operation.
sub op_mul { my ($vL, $vR) = @_; return $vL * $vR; }
sub op_div { my ($vL, $vR) = @_; return undef if $vR == 0; return $vL / $vR; }
sub op_add { my ($vL, $vR) = @_; return $vL + $vR; }
sub op_sub { my ($vL, $vR) = @_; return $vL - $vR; }

# -------------------------------------------------------------
# Return one op from an oplist.
sub oplist_op {
    my ($oplist, $opx) = @_;
    return ($oplist >> ($op_bits * $opx)) & ((1 << $op_bits) -1);
}

# Does an oplist contain any op named by op_names?
sub oplist_has_any {
    my ($s, $op_names) = @_;
    for (my $opx = 0; $opx < num_op_nodes($s); ++$opx) {
        my $op_name = $ops[oplist_op($s->{oplist}, $opx)];
        return 1 if index($op_names, $op_name) >= 0;
    }
    return 0;
}

# Index in list of all permutations of precedence.
sub oplist_prec_cfg {
    my ($s) = @_;
    my $ap = 0;
    for (my $opx = 0; $opx < num_op_nodes($s); ++$opx) {
        my $op = oplist_op($s->{oplist}, $opx);
        $ap <<= $prec_bits;
        $ap |= $op_prec[$op];
    }
    return $ap;
}

sub num_op_nodes {
    my ($s) = @_;
    return scalar @{$s->{vars}} - 1;
}

sub factorial {
    my ($n) = @_;
    my $r = 1;
    for (; $n > 1; --$n) {
        $r *= $n;
    }
    return $r;
}
